@page "/debt-management"
@using MoneyTracks.Models
@inject MoneyTracks.Services.LocalDbService DbService

<div class="container mt-4">
    <!-- Debt Overview -->
    <div class="card mb-4">
        <div class="card-header">
            <h3 class="mb-0">Debt Overview</h3>
        </div>
        <div class="card-body">
            <div class="row text-center">
                <div class="col-md-3">
                    <h4>Total Debts</h4>
                    <p class="h5 text-primary">@TotalDebtAmount.ToString("C")</p>
                </div>
                <div class="col-md-3">
                    <h4>Cleared Debts</h4>
                    <p class="h5 text-success">@ClearedDebtAmount.ToString("C")</p>
                </div>
                <div class="col-md-3">
                    <h4>Pending Debts</h4>
                    <p class="h5 text-danger">@PendingDebtAmount.ToString("C")</p>
                </div>
                <div class="col-md-3">
                    <h4>Number of Debts</h4>
                    <p class="h5 text-info">@TotalDebtCount</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Debt Form -->
    <div class="card mb-4">
        <div class="card-header">
            <h3 class="mb-0">Add Debt</h3>
        </div>
        <div class="card-body">
            <EditForm Model="NewDebt" OnValidSubmit="HandleSubmit" class="row g-3">
                <DataAnnotationsValidator />
                <ValidationSummary class="alert alert-danger" />

                <div class="col-md-6">
                    <label class="form-label">Title</label>
                    <InputText @bind-Value="NewDebt.Title" class="form-control" />
                </div>

                <div class="col-md-6">
                    <label class="form-label">Source</label>
                    <InputText @bind-Value="NewDebt.Source" class="form-control" />
                </div>

                <div class="col-md-6">
                    <label class="form-label">Amount</label>
                    <InputNumber @bind-Value="NewDebt.Amount" class="form-control" />
                </div>

                <div class="col-md-6">
                    <label class="form-label">Due Date</label>
                    <InputDate @bind-Value="NewDebt.DueDate" class="form-control" />
                </div>

                <div class="col-md-6">
                    <label class="form-label">Tags</label>
                    <InputText @bind-Value="NewDebt.Tags" class="form-control" />
                </div>

                <div class="col-md-6">
                    <label class="form-label">Notes</label>
                    <InputTextArea @bind-Value="NewDebt.Notes" class="form-control" />
                </div>

                <div class="col-12">
                    <button type="submit" class="btn btn-primary">Add Debt</button>
                </div>
            </EditForm>
        </div>
    </div>

    <!-- Search and Filter -->
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">Search and Filter Debts</h5>
        </div>
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-4">
                    <label class="form-label">Search by Title</label>
                    <InputText @bind-Value="SearchTitle" class="form-control" />
                </div>

                <div class="col-md-4">
                    <label class="form-label">Search by Source</label>
                    <InputText @bind-Value="SearchSource" class="form-control" />
                </div>

                <div class="col-md-4">
                    <label class="form-label">Amount Range</label>
                    <div class="input-group">
                        <InputNumber @bind-Value="MinAmount" class="form-control" placeholder="Min" />
                        <InputNumber @bind-Value="MaxAmount" class="form-control" placeholder="Max" />
                    </div>
                </div>

                <div class="col-md-4">
                    <label class="form-label">Due Date Range</label>
                    <div class="input-group">
                        <InputDate @bind-Value="StartDueDate" class="form-control" placeholder="Start" />
                        <InputDate @bind-Value="EndDueDate" class="form-control" placeholder="End" />
                    </div>
                </div>

                <div class="col-md-4">
                    <label class="form-label">Filter by Tags</label>
                    <InputText @bind-Value="SearchTags" class="form-control" />
                </div>

                <div class="col-md-4">
                    <label class="form-label">Filter by Status</label>
                    <InputSelect @bind-Value="FilterStatus" class="form-select">
                        <option value="">All</option>
                        <option value="Cleared">Cleared</option>
                        <option value="Pending">Pending</option>
                    </InputSelect>
                </div>

                <div class="col-md-4">
                    <label class="form-label">Sort By</label>
                    <InputSelect @bind-Value="SortColumn" class="form-select">
                        <option value="Title">Title</option>
                        <option value="Source">Source</option>
                        <option value="Amount">Amount</option>
                        <option value="DueDate">Due Date</option>
                    </InputSelect>
                </div>

                <div class="col-md-4 mt-2">
                    <button @onclick="ToggleSortOrder" class="btn btn-secondary">
                        Sort: @(SortAscending ? "Ascending" : "Descending")
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Debt List -->
    <div class="card">
        <div class="card-header">
            <h3 class="mb-0">Debts</h3>
        </div>
        <div class="card-body">
            @if (FilteredDebts == null || !FilteredDebts.Any())
            {
                <div class="alert alert-info">No debts found.</div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-light">
                            <tr>
                                <th>Title</th>
                                <th>Source</th>
                                <th>Amount</th>
                                <th>Due Date</th>
                                <th>Status</th>
                                <th>Tags</th>
                                <th>Notes</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var debt in FilteredDebts)
                            {
                                <tr>
                                    <td>@debt.Title</td>
                                    <td>@debt.Source</td>
                                    <td>@debt.Amount.ToString("C")</td>
                                    <td>@debt.DueDate.ToShortDateString()</td>
                                    <td>
                                        <span class="badge @(debt.IsCleared ? "bg-success" : "bg-danger")">
                                            @(debt.IsCleared ? "Cleared" : "Pending")
                                        </span>
                                    </td>
                                    <td>@debt.Tags</td>
                                    <td>@debt.Notes</td>
                                    <td>
                                        <button @onclick="() => OpenEditModal(debt)" class="btn btn-warning btn-sm me-2">Edit</button>
                                        <button @onclick="() => DeleteDebt(debt)" class="btn btn-danger btn-sm">Delete</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private Debt NewDebt = new Debt();
    private Debt EditableDebt;
    private List<Debt> Debts = new();
    private List<Debt> FilteredDebts = new();
    private bool IsEditModalVisible;

    private string SearchTitle = string.Empty;
    private string SearchSource = string.Empty;
    private decimal? MinAmount;
    private decimal? MaxAmount;
    private DateTime? StartDueDate;
    private DateTime? EndDueDate;
    private string SearchTags = string.Empty;
    private string FilterStatus = string.Empty;

    private string SortColumn = "DueDate";
    private bool SortAscending = true;

    private decimal TotalDebtAmount;
    private decimal ClearedDebtAmount;
    private decimal PendingDebtAmount;
    private int TotalDebtCount;

    protected override async Task OnInitializedAsync()
    {
        Debts = await DbService.GetAllDebts();
        UpdateDebtMetrics();
        UpdateFilteredDebts();
    }

    private async Task HandleSubmit()
    {
        await DbService.AddDebt(NewDebt);
        Debts.Add(NewDebt);
        NewDebt = new Debt();
        UpdateDebtMetrics();
        UpdateFilteredDebts();
    }

    private async Task DeleteDebt(Debt debt)
    {
        await DbService.DeleteDebt(debt);
        Debts.Remove(debt);
        UpdateDebtMetrics();
        UpdateFilteredDebts();
    }

    private void OpenEditModal(Debt debt)
    {
        EditableDebt = new Debt
            {
                DebtId = debt.DebtId,
                Title = debt.Title,
                Source = debt.Source,
                Amount = debt.Amount,
                DueDate = debt.DueDate,
                Tags = debt.Tags,
                Notes = debt.Notes,
                IsCleared = debt.IsCleared
            };
        IsEditModalVisible = true;
    }

    private void CloseEditModal()
    {
        IsEditModalVisible = false;
    }

    private async Task SaveEdit()
    {
        var existingDebt = Debts.FirstOrDefault(d => d.DebtId == EditableDebt.DebtId);
        if (existingDebt != null)
        {
            existingDebt.Title = EditableDebt.Title;
            existingDebt.Source = EditableDebt.Source;
            existingDebt.Amount = EditableDebt.Amount;
            existingDebt.DueDate = EditableDebt.DueDate;
            existingDebt.Tags = EditableDebt.Tags;
            existingDebt.Notes = EditableDebt.Notes;
            existingDebt.IsCleared = EditableDebt.IsCleared;

            await DbService.UpdateDebt(existingDebt);
        }
        UpdateDebtMetrics();
        CloseEditModal();
        UpdateFilteredDebts();
    }

    private void UpdateDebtMetrics()
    {
        TotalDebtAmount = Debts.Sum(d => (decimal)d.Amount);
        ClearedDebtAmount = Debts.Where(d => d.IsCleared).Sum(d => (decimal)d.Amount);
        PendingDebtAmount = Debts.Where(d => !d.IsCleared).Sum(d => (decimal)d.Amount);
        TotalDebtCount = Debts.Count;
    }

    private void UpdateFilteredDebts()
    {
        FilteredDebts = Debts
            .Where(d =>
                (string.IsNullOrWhiteSpace(SearchTitle) || d.Title.Contains(SearchTitle, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrWhiteSpace(SearchSource) || d.Source.Contains(SearchSource, StringComparison.OrdinalIgnoreCase)) &&
                (!MinAmount.HasValue || (decimal)d.Amount >= MinAmount.Value) &&
                (!MaxAmount.HasValue || (decimal)d.Amount <= MaxAmount.Value) &&
                (!StartDueDate.HasValue || d.DueDate >= StartDueDate.Value) &&
                (!EndDueDate.HasValue || d.DueDate <= EndDueDate.Value) &&
                (string.IsNullOrWhiteSpace(SearchTags) || d.Tags.Contains(SearchTags, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrWhiteSpace(FilterStatus) || (FilterStatus == "Cleared" && d.IsCleared) || (FilterStatus == "Pending" && !d.IsCleared))
            )
            .OrderBy(d => SortAscending ? GetSortValue(d) : null)
            .ThenByDescending(d => !SortAscending ? GetSortValue(d) : null)
            .ToList();
    }

    private object GetSortValue(Debt debt)
    {
        return SortColumn switch
        {
            "Title" => debt.Title,
            "Source" => debt.Source,
            "Amount" => debt.Amount,
            "DueDate" => debt.DueDate,
            _ => debt.DueDate,
        };
    }

    private void ToggleSortOrder()
    {
        SortAscending = !SortAscending;
        UpdateFilteredDebts();
    }
}
