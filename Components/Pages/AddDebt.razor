@page "/debt-management"
@using MoneyTracks.Models
@inject MoneyTracks.Services.LocalDbService DbService

<div class="container mt-4">
    <!-- Available Cash & Debt Overview -->
    <div class="row">
        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-header">
                    <h3 class="mb-0">Available Cash</h3>
                </div>
                <div class="card-body text-center">
                    <h2 class="text-primary">@AvailableCash.ToString("C")</h2>
                    <small>(After Credits, Debits, and DebtPayments)</small>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-header">
                    <h3 class="mb-0">Debt Overview</h3>
                </div>
                <div class="card-body">
                    <div class="row text-center">
                        <div class="col-md-6">
                            <h5>Total Debts</h5>
                            <p class="h5 text-primary">@TotalDebtAmount.ToString("C")</p>
                        </div>
                        <div class="col-md-6">
                            <h5>Cleared Debts</h5>
                            <p class="h5 text-success">@ClearedDebtAmount.ToString("C")</p>
                        </div>
                    </div>
                    <div class="row text-center mt-3">
                        <div class="col-md-6">
                            <h5>Pending Debts</h5>
                            <p class="h5 text-danger">@PendingDebtAmount.ToString("C")</p>
                        </div>
                        <div class="col-md-6">
                            <h5>Number of Debts</h5>
                            <p class="h5 text-info">@TotalDebtCount</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Debt Form -->
    <div class="card mb-4">
        <div class="card-header">
            <h3 class="mb-0">Add Debt</h3>
        </div>
        <div class="card-body">
            <EditForm Model="NewDebt" OnValidSubmit="HandleSubmit" class="row g-3">
                <DataAnnotationsValidator />
                <ValidationSummary class="alert alert-danger" />

                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <div class="alert alert-danger">@ErrorMessage</div>
                }

                <div class="col-md-6">
                    <label class="form-label">Title</label>
                    <InputText @bind-Value="NewDebt.Title" class="form-control" required />
                </div>
                <div class="col-md-6">
                    <label class="form-label">Source</label>
                    <InputText @bind-Value="NewDebt.Source" class="form-control" required />
                </div>
                <div class="col-md-6">
                    <label class="form-label">Total Amount</label>
                    <InputNumber @bind-Value="NewDebt.TotalAmount" class="form-control" required Min="0.01" />
                </div>
                <div class="col-md-6">
                    <label class="form-label">Due Date</label>
                    <InputDate @bind-Value="NewDebt.DueDate" class="form-control" required />
                </div>
                <div class="col-md-6">
                    <label class="form-label">Tags</label>
                    <InputText @bind-Value="NewDebt.Tags" class="form-control" required />
                </div>
                <div class="col-md-6">
                    <label class="form-label">Notes</label>
                    <InputTextArea @bind-Value="NewDebt.Notes" class="form-control" />
                </div>
                <div class="col-12">
                    <button type="submit" class="btn btn-primary">Add Debt</button>
                </div>
            </EditForm>
        </div>
    </div>

    <!-- Debt List -->
    <div class="card">
        <div class="card-header">
            <h3 class="mb-0">Debts</h3>
        </div>
        <div class="card-body">
            @if (FilteredDebts == null || !FilteredDebts.Any())
            {
                <div class="alert alert-info">No debts found.</div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-light">
                            <tr>
                                <th>Title</th>
                                <th>Source</th>
                                <th>Total Amount</th>
                                <th>Remaining</th>
                                <th>Due Date</th>
                                <th>Status</th>
                                <th>Tags</th>
                                <th>Notes</th>
                                <th>Partial %</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var debt in FilteredDebts)
                            {
                                <tr>
                                    <td>@debt.Title</td>
                                    <td>@debt.Source</td>
                                    <td>@debt.TotalAmount.ToString("C")</td>
                                    <td>@debt.RemainingAmount.ToString("C")</td>
                                    <td>
                                        @(debt.DueDate == DateTime.MinValue
                                            ? "Not Set"
                                            : debt.DueDate.ToShortDateString())
                                    </td>
                                    <td>
                                        <span class="badge @(debt.IsCleared ? "bg-success" : "bg-danger")">
                                            @(debt.IsCleared ? "Cleared" : "Pending")
                                        </span>
                                    </td>
                                    <td>@debt.Tags</td>
                                    <td>@debt.Notes</td>
                                    <td>
                                        @if (!debt.IsCleared)
                                        {
                                            <!-- Only sets the fraction in memory; won't clear the debt yet -->
                                            <select class="form-select form-select-sm"
                                                    @onchange="(e) => OnFractionChanged(debt, e.Value?.ToString())">
                                                <option value="">Select %</option>
                                                <option value="0.25">25%</option>
                                                <option value="0.50">50%</option>
                                                <option value="0.75">75%</option>
                                                <option value="1.0">100%</option>
                                            </select>
                                        }
                                    </td>
                                    <td>
                                        <button @onclick="() => EditDebt(debt)"
                                                class="btn btn-warning btn-sm me-2">
                                            Edit
                                        </button>

                                        <button @onclick="() => DeleteDebt(debt)"
                                                class="btn btn-danger btn-sm me-2">
                                            Delete
                                        </button>

                                        @if (!debt.IsCleared)
                                        {
                                            <button @onclick="() => ClearDebtByPercentage(debt)"
                                                    class="btn btn-success btn-sm">
                                                Clear
                                            </button>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

<!-- Edit Debt Modal -->
@if (IsEditModalVisible)
{
    <div class="modal show d-block" style="background-color:rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Debt: @EditableDebt?.Title</h5>
                    <button type="button" class="btn-close" @onclick="CloseEditModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="EditableDebt" OnValidSubmit="SaveDebtEdit" class="row g-3">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="alert alert-danger" />

                        <div class="col-md-6">
                            <label class="form-label">Title</label>
                            <InputText @bind-Value="EditableDebt.Title" class="form-control" required />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Source</label>
                            <InputText @bind-Value="EditableDebt.Source" class="form-control" required />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Total Amount</label>
                            <InputNumber @bind-Value="EditableDebt.TotalAmount" class="form-control" required Min="0.01" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Remaining Amount</label>
                            <InputNumber @bind-Value="EditableDebt.RemainingAmount" class="form-control" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Due Date</label>
                            <InputDate @bind-Value="EditableDebt.DueDate" class="form-control" required />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Tags</label>
                            <InputText @bind-Value="EditableDebt.Tags" class="form-control" required />
                        </div>
                        <div class="col-12">
                            <label class="form-label">Notes</label>
                            <InputTextArea @bind-Value="EditableDebt.Notes" class="form-control" />
                        </div>

                        <div class="col-12 mt-3">
                            <button type="submit" class="btn btn-success">Save</button>
                            <button type="button" class="btn btn-secondary" @onclick="CloseEditModal">
                                Cancel
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private Debt NewDebt = new Debt { DueDate = DateTime.Today };
    private List<Debt> Debts = new();
    private List<Debt> FilteredDebts = new();

    private decimal AvailableCash;
    private decimal TotalDebtAmount;
    private decimal ClearedDebtAmount;
    private decimal PendingDebtAmount;
    private int TotalDebtCount;

    private bool IsEditModalVisible;
    private Debt EditableDebt;
    private string ErrorMessage;

    private Dictionary<int, decimal> FractionSelections = new();

    protected override async Task OnInitializedAsync()
    {
        Debts = await DbService.GetAllDebts();

        foreach (var debt in Debts)
        {
            if (debt.RemainingAmount <= 0)
            {
                debt.IsCleared = true;
                debt.RemainingAmount = 0;
                await DbService.UpdateDebt(debt);
            }
        }

        await RefreshDashboard();
    }

    private async Task RefreshDashboard()
    {
        AvailableCash = await DbService.GetAvailableCash();
        TotalDebtAmount = Debts.Sum(d => d.TotalAmount);
        ClearedDebtAmount = Debts.Where(d => d.IsCleared).Sum(d => d.TotalAmount);
        PendingDebtAmount = Debts.Where(d => !d.IsCleared).Sum(d => d.RemainingAmount);
        TotalDebtCount = Debts.Count;

        FilteredDebts = Debts;
    }

    private async Task HandleSubmit()
    {
        if (string.IsNullOrWhiteSpace(NewDebt.Title) ||
            string.IsNullOrWhiteSpace(NewDebt.Source) ||
            string.IsNullOrWhiteSpace(NewDebt.Tags) ||
            NewDebt.DueDate == DateTime.MinValue ||
            NewDebt.TotalAmount <= 0)
        {
            ErrorMessage = "All fields are required, and Total Amount must be greater than 0.";
            StateHasChanged();
            return;
        }

        NewDebt.RemainingAmount = NewDebt.TotalAmount;
        await DbService.AddDebt(NewDebt);
        Debts.Add(NewDebt);

        NewDebt = new Debt { DueDate = DateTime.Today };
        ErrorMessage = null;

        await RefreshDashboard();
    }

    private void OnFractionChanged(Debt debt, string fractionStr)
    {
        if (string.IsNullOrWhiteSpace(fractionStr))
        {
            FractionSelections.Remove(debt.DebtId);
            return;
        }

        if (decimal.TryParse(fractionStr, out var fraction))
        {
            FractionSelections[debt.DebtId] = fraction;
        }
    }

    private async Task ClearDebtByPercentage(Debt debt)
    {
        if (!FractionSelections.TryGetValue(debt.DebtId, out var fraction)) return;

        var partialAmount = Math.Round(debt.RemainingAmount * fraction, 2);
        if (partialAmount <= 0 || partialAmount > debt.RemainingAmount) return;

        var availableCash = await DbService.GetAvailableCash();
        if (partialAmount > availableCash) return;

        var paymentTx = new Transaction
            {
                Title = debt.Title,
                Type = "DebtPayment",
                Amount = partialAmount,
                Date = DateTime.Now,
                Notes = $"Cleared {(fraction * 100)}% of {debt.Title}",
                IsPendingDebt = true
            };

        await DbService.CreateTransaction(paymentTx);
        FractionSelections.Remove(debt.DebtId);

        Debts = await DbService.GetAllDebts();
        await RefreshDashboard();
    }

    private void EditDebt(Debt debt)
    {
        EditableDebt = new Debt
            {
                DebtId = debt.DebtId,
                Title = debt.Title,
                Source = debt.Source,
                TotalAmount = debt.TotalAmount,
                RemainingAmount = debt.RemainingAmount,
                DueDate = debt.DueDate,
                Notes = debt.Notes,
                Tags = debt.Tags,
                IsCleared = debt.IsCleared
            };
        IsEditModalVisible = true;
    }

    private async Task SaveDebtEdit()
    {
        if (string.IsNullOrWhiteSpace(EditableDebt.Title) ||
            string.IsNullOrWhiteSpace(EditableDebt.Source) ||
            string.IsNullOrWhiteSpace(EditableDebt.Tags) ||
            EditableDebt.DueDate == DateTime.MinValue ||
            EditableDebt.TotalAmount <= 0)
        {
            ErrorMessage = "All fields are required, and Total Amount must be greater than 0.";
            StateHasChanged();
            return;
        }

        var existing = Debts.FirstOrDefault(d => d.DebtId == EditableDebt.DebtId);
        if (existing != null)
        {
            existing.Title = EditableDebt.Title;
            existing.Source = EditableDebt.Source;
            existing.TotalAmount = EditableDebt.TotalAmount;
            existing.RemainingAmount = EditableDebt.RemainingAmount;
            existing.DueDate = EditableDebt.DueDate;
            existing.Notes = EditableDebt.Notes;
            existing.Tags = EditableDebt.Tags;
            existing.IsCleared = EditableDebt.IsCleared;

            await DbService.UpdateDebt(existing);
        }

        IsEditModalVisible = false;
        await RefreshDashboard();
    }

    private void CloseEditModal()
    {
        IsEditModalVisible = false;
    }

    private async Task DeleteDebt(Debt debt)
    {
        await DbService.DeleteDebt(debt);
        Debts.Remove(debt);
        await RefreshDashboard();
    }
}
