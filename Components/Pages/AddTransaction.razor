@page "/add-transaction"
@using MoneyTracks.Models
@using MoneyTracks.Services
@using System.Globalization
@inject LocalDbService DbService

<div class="container mt-4">
    <!-- Transaction Overview, e.g. total inflow/outflow -->
    <div class="card mb-4">
        <div class="card-body">
            <h4>Transaction Overview</h4>
            <div class="row text-center">
                <div class="col-md-3">
                    <h5>Total Balance</h5>
                    <p class="text-primary fs-5 fw-bold">@FormatAmount(TotalBalance)</p>
                </div>
                <div class="col-md-3">
                    <h5>Available Balance</h5>
                    <p class="text-info fs-5 fw-bold">@FormatAmount(AvailableBalance)</p>
                </div>
                <div class="col-md-3">
                    <h5>Total Inflow</h5>
                    <p class="text-success fs-5 fw-bold">@FormatAmount(TotalInflow)</p>
                </div>
                <div class="col-md-3">
                    <h5>Total Outflow</h5>
                    <p class="text-danger fs-5 fw-bold">@FormatAmount(TotalOutflow)</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Transaction Section -->
    <div class="card">
        <div class="card-header">
            <h3>Add Transaction</h3>
        </div>
        <div class="card-body">
            <EditForm Model="NewTransaction" OnValidSubmit="HandleSubmit" class="row g-3">
                <DataAnnotationsValidator />
                <ValidationSummary class="alert alert-danger" />

                <div class="col-md-6">
                    <label class="form-label">Title*</label>
                    <InputText @bind-Value="NewTransaction.Title" class="form-control" required />
                </div>
                <div class="col-md-6">
                    <label class="form-label">Type*</label>
                    <InputSelect @bind-Value="NewTransaction.Type" class="form-select" required>
                        <option value="Credit">Credit</option>
                        <option value="Debit">Debit</option>
                    </InputSelect>
                </div>
                <div class="col-md-6">
                    <label class="form-label">Amount*</label>
                    <InputNumber @bind-Value="NewTransaction.Amount" class="form-control" required Min="0.01" />
                </div>
                <div class="col-md-6">
                    <label class="form-label">Date*</label>
                    <InputDate @bind-Value="NewTransaction.Date" class="form-control" required />
                </div>
                <div class="col-md-6">
                    <label class="form-label">Tags*</label>
                    <InputText @bind-Value="NewTransaction.Tags" class="form-control" required />
                </div>
                <div class="col-md-6">
                    <label class="form-label">Notes</label>
                    <InputText @bind-Value="NewTransaction.Notes" class="form-control" />
                </div>
                <div class="col-12">
                    <button type="submit" class="btn btn-primary">Add Transaction</button>
                </div>
            </EditForm>
        </div>
    </div>

    <!-- Transactions List -->
    <div class="card mt-4">
        <div class="card-header">
            <h3>Transactions</h3>
        </div>
        <div class="card-body">
            @if (FilteredTransactions == null || !FilteredTransactions.Any())
            {
                <div class="alert alert-info">No transactions found.</div>
            }
            else
            {
                <table class="table table-striped table-hover">
                    <thead class="table-light">
                        <tr>
                            <th>Title</th>
                            <th>Type</th>
                            <th>Amount</th>
                            <th>Date</th>
                            <th>Notes</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var tx in FilteredTransactions)
                        {
                            <tr>
                                <td>@tx.Title</td>
                                <td>@tx.Type</td>
                                <td>@FormatAmount(tx.Amount)</td>
                                <td>@tx.Date.ToShortDateString()</td>
                                <td>@tx.Notes</td>
                                <td>
                                    <button class="btn btn-warning btn-sm me-2" @onclick="() => OpenEditModal(tx)">Edit</button>
                                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteTransaction(tx)">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>

    @if (IsEditModalVisible)
    {
        <div class="modal show d-block" tabindex="-1" style="background-color:rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Edit Transaction</h5>
                        <button type="button" class="btn-close" @onclick="CloseEditModal"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="EditableTransaction" OnValidSubmit="SaveEdit" class="row g-3">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="alert alert-danger" />

                            <div class="col-md-6">
                                <label class="form-label">Title*</label>
                                <InputText @bind-Value="EditableTransaction.Title" class="form-control" required />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Type*</label>
                                <InputSelect @bind-Value="EditableTransaction.Type" class="form-select" required>
                                    <option value="Credit">Credit</option>
                                    <option value="Debit">Debit</option>
                                </InputSelect>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Amount*</label>
                                <InputNumber @bind-Value="EditableTransaction.Amount" class="form-control" required Min="0.01" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Date*</label>
                                <InputDate @bind-Value="EditableTransaction.Date" class="form-control" required />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Tags*</label>
                                <InputText @bind-Value="EditableTransaction.Tags" class="form-control" required />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Notes</label>
                                <InputText @bind-Value="EditableTransaction.Notes" class="form-control" />
                            </div>
                            <div class="col-12 mt-3">
                                <button type="submit" class="btn btn-success">Save Changes</button>
                                <button type="button" class="btn btn-secondary" @onclick="CloseEditModal">Cancel</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private Transaction NewTransaction = new Transaction { Type = "Credit", Date = DateTime.Today };
    private List<Transaction> Transactions = new();
    private List<Transaction> FilteredTransactions = new();

    private decimal TotalBalance;
    private decimal TotalInflow;
    private decimal TotalOutflow;
    private decimal AvailableBalance;

    private bool IsEditModalVisible;
    private Transaction EditableTransaction;

    private CultureInfo PreferredCulture = CultureInfo.InvariantCulture;

    protected override async Task OnInitializedAsync()
    {
        var user = await DbService.GetLoggedInUser();
        var code = user?.PreferredCurrency ?? "USD";
        PreferredCulture = MapCurrencyToCulture(code);

        await LoadTransactionsFromDatabase();
        await UpdateOverview();
        UpdateFilteredTransactions();
    }

    private CultureInfo MapCurrencyToCulture(string code)
    {
        return code switch
        {
            "USD" => new CultureInfo("en-US"),
            "EUR" => new CultureInfo("fr-FR"),
            "GBP" => new CultureInfo("en-GB"),
            "JPY" => new CultureInfo("ja-JP"),
            "AUD" => new CultureInfo("en-AU"),
            _ => CultureInfo.InvariantCulture
        };
    }

    private string FormatAmount(decimal amount)
    {
        return amount.ToString("C", PreferredCulture);
    }

    private async Task LoadTransactionsFromDatabase()
    {
        Transactions = await DbService.GetTransactions();
        AvailableBalance = await DbService.GetAvailableCash();
    }

    private async Task UpdateOverview()
    {
        TotalInflow = Transactions.Where(t => t.Type == "Credit").Sum(t => t.Amount);
        TotalOutflow = Transactions.Where(t => t.Type == "Debit").Sum(t => t.Amount);
        TotalBalance = TotalInflow - TotalOutflow;
        AvailableBalance = await DbService.GetAvailableCash();
    }

    private void UpdateFilteredTransactions()
    {
        FilteredTransactions = Transactions;
    }

    private async Task HandleSubmit()
    {
        if (NewTransaction.Type == "Debit" && NewTransaction.Amount > AvailableBalance)
        {
            errorMessage = "Insufficient funds for this transaction.";
            return;
        }

        await DbService.CreateTransaction(NewTransaction);

        await LoadTransactionsFromDatabase();
        await UpdateOverview();
        UpdateFilteredTransactions();

        NewTransaction = new Transaction { Type = "Credit", Date = DateTime.Today };
    }

    private void OpenEditModal(Transaction tx)
    {
        EditableTransaction = new Transaction
            {
                TransactionId = tx.TransactionId,
                Title = tx.Title,
                Type = tx.Type,
                Amount = tx.Amount,
                Tags = tx.Tags,
                Date = tx.Date,
                Notes = tx.Notes
            };
        IsEditModalVisible = true;
    }

    private async Task SaveEdit()
    {
        var existing = Transactions.FirstOrDefault(t => t.TransactionId == EditableTransaction.TransactionId);
        if (existing != null)
        {
            existing.Title = EditableTransaction.Title;
            existing.Type = EditableTransaction.Type;
            existing.Amount = EditableTransaction.Amount;
            existing.Tags = EditableTransaction.Tags;
            existing.Date = EditableTransaction.Date;
            existing.Notes = EditableTransaction.Notes;

            await DbService.UpdateTransaction(existing);
        }

        IsEditModalVisible = false;
        await UpdateOverview();
        UpdateFilteredTransactions();
    }

    private void CloseEditModal()
    {
        IsEditModalVisible = false;
    }

    private async Task DeleteTransaction(Transaction tx)
    {
        await DbService.DeleteTransaction(tx);
        Transactions.Remove(tx);
        await UpdateOverview();
        UpdateFilteredTransactions();
    }

    private string? errorMessage;
}
