@page "/add-transaction"
@using MoneyTracks.Models
@inject MoneyTracks.Services.LocalDbService DbService

<div class="container mt-4">
    <!-- Transaction Overview -->
    <div class="card mb-4">
        <div class="card-body">
            <h4 class="card-title">Transaction Overview</h4>
            <div class="row text-center">
                <div class="col-md-4">
                    <h5>Total Balance</h5>
                    <p class="text-primary fs-4 fw-bold">@TotalBalance.ToString("C")</p>
                </div>
                <div class="col-md-4">
                    <h5>Total Credits</h5>
                    <p class="text-success fs-4 fw-bold">@TotalCredits.ToString("C")</p>
                </div>
                <div class="col-md-4">
                    <h5>Total Debits</h5>
                    <p class="text-danger fs-4 fw-bold">@TotalDebits.ToString("C")</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Transaction Section -->
    <div class="card">
        <div class="card-header">
            <h3 class="mb-0">Add Transaction</h3>
        </div>
        <div class="card-body">
            <EditForm Model="NewTransaction" OnValidSubmit="HandleSubmit" class="row g-3">
                <DataAnnotationsValidator />
                <ValidationSummary class="alert alert-danger" />

                <div class="col-md-6">
                    <label class="form-label">Title</label>
                    <InputText @bind-Value="NewTransaction.Title" class="form-control" />
                </div>

                <div class="col-md-6">
                    <label class="form-label">Type</label>
                    <InputSelect @bind-Value="NewTransaction.Type" class="form-select">
                        <option value="Credit">Credit</option>
                        <option value="Debit">Debit</option>
                        <option value="Debt">Debt</option>
                    </InputSelect>
                </div>

                <div class="col-md-6">
                    <label class="form-label">Amount</label>
                    <InputNumber @bind-Value="NewTransaction.Amount" class="form-control" />
                </div>

                <div class="col-md-6">
                    <label class="form-label">Tags</label>
                    <InputText @bind-Value="NewTransaction.Tags" class="form-control" />
                </div>

                <div class="col-md-6">
                    <label class="form-label">Date</label>
                    <InputDate @bind-Value="NewTransaction.Date" class="form-control" />
                </div>

                <div class="col-md-6">
                    <label class="form-label">Notes</label>
                    <InputText @bind-Value="NewTransaction.Notes" class="form-control" />
                </div>

                <div class="col-12">
                    <button type="submit" class="btn btn-primary">Add Transaction</button>
                </div>
            </EditForm>
        </div>
    </div>

    <!-- Transactions List Section -->
    <div class="card mt-4">
        <div class="card-header">
            <div class="row">
                <div class="col-md-6">
                    <h3 class="mb-0">Transactions</h3>
                </div>
                <div class="col-md-6 text-end">
                    <InputText @bind-Value="SearchQuery" class="form-control" placeholder="Search transactions..." />
                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-6">
                    <label class="form-label">Sort By</label>
                    <InputSelect @bind-Value="SortBy" class="form-select">
                        <option value="Title">Title</option>
                        <option value="Date">Date</option>
                        <option value="Amount">Amount</option>
                        <option value="Type">Type</option>
                    </InputSelect>
                </div>
                <div class="col-md-6">
                    <label class="form-label">Filter By Type</label>
                    <InputSelect @bind-Value="FilterByType" class="form-select">
                        <option value="">All</option>
                        <option value="Credit">Credit</option>
                        <option value="Debit">Debit</option>
                        <option value="Debt">Debt</option>
                    </InputSelect>
                </div>
            </div>
            <button class="btn btn-secondary mb-3" @onclick="ToggleSortDirection">
                Sort Direction: @(SortDescending ? "Descending" : "Ascending")
            </button>

            @if (FilteredTransactions == null || !FilteredTransactions.Any())
            {
                <div class="alert alert-info">No transactions found.</div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-light">
                            <tr>
                                <th>Title</th>
                                <th>Type</th>
                                <th>Amount</th>
                                <th>Tags</th>
                                <th>Date</th>
                                <th>Notes</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var transaction in FilteredTransactions)
                            {
                                <tr>
                                    <td>@transaction.Title</td>
                                    <td>
                                        <span class="badge @(transaction.Type switch {
                                            "Credit" => "bg-success",
                                            "Debit" => "bg-danger",
                                            "Debt" => "bg-warning text-dark",
                                            _ => "bg-secondary"
                                        })">
                                            @transaction.Type
                                        </span>
                                    </td>
                                    <td>@transaction.Amount.ToString("C")</td>
                                    <td>
                                        @foreach (var tag in transaction.Tags?.Split(',') ?? Array.Empty<string>())
                                        {
                                            <span class="badge bg-info me-1">@tag.Trim()</span>
                                        }
                                    </td>
                                    <td>@transaction.Date.ToShortDateString()</td>
                                    <td>@transaction.Notes</td>
                                    <td>
                                        <button @onclick="() => OpenEditModal(transaction)" class="btn btn-warning btn-sm me-2">
                                            <i class="bi bi-pencil"></i> Edit
                                        </button>
                                        <button @onclick="() => DeleteTransaction(transaction)" class="btn btn-danger btn-sm">
                                            <i class="bi bi-trash"></i> Delete
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

@if (IsEditModalVisible)
{
    <div class="modal show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Transaction</h5>
                    <button type="button" class="btn-close" @onclick="CloseEditModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="EditableTransaction" OnValidSubmit="SaveEdit" class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">Title</label>
                            <InputText @bind-Value="EditableTransaction.Title" class="form-control" />
                        </div>

                        <div class="col-md-6">
                            <label class="form-label">Type</label>
                            <InputSelect @bind-Value="EditableTransaction.Type" class="form-select">
                                <option value="Credit">Credit</option>
                                <option value="Debit">Debit</option>
                                <option value="Debt">Debt</option>
                            </InputSelect>
                        </div>

                        <div class="col-md-6">
                            <label class="form-label">Amount</label>
                            <InputNumber @bind-Value="EditableTransaction.Amount" class="form-control" />
                        </div>

                        <div class="col-md-6">
                            <label class="form-label">Tags</label>
                            <InputText @bind-Value="EditableTransaction.Tags" class="form-control" />
                        </div>

                        <div class="col-md-6">
                            <label class="form-label">Date</label>
                            <InputDate @bind-Value="EditableTransaction.Date" class="form-control" />
                        </div>

                        <div class="col-md-6">
                            <label class="form-label">Notes</label>
                            <InputText @bind-Value="EditableTransaction.Notes" class="form-control" />
                        </div>

                        <div class="col-12">
                            <button type="submit" class="btn btn-success">Save Changes</button>
                            <button type="button" class="btn btn-secondary" @onclick="CloseEditModal">Cancel</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private Transaction NewTransaction = new Transaction { Type = "Credit" };
    private Transaction EditableTransaction;
    private List<Transaction> Transactions = new();
    private List<Transaction> FilteredTransactions = new();
    private decimal TotalBalance = 0;
    private decimal TotalCredits = 0;
    private decimal TotalDebits = 0;
    private bool IsEditModalVisible = false;

    private string SearchQuery = "";
    private string SortBy = "Date";
    private bool SortDescending = false;
    private string FilterByType = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadTransactionsFromDatabase();
        await UpdateTotalBalance();
        UpdateFilteredTransactions();
        UpdateTransactionOverview();
    }

    private async Task LoadTransactionsFromDatabase()
    {
        Transactions = await DbService.GetTransactions();
        UpdateFilteredTransactions();
    }

    private async Task UpdateTotalBalance()
    {
        TotalBalance = Transactions
            .Where(t => t.Type == "Credit" || t.Type == "Debit")
            .Sum(t => t.Type == "Credit" ? Convert.ToDecimal(t.Amount) : -Convert.ToDecimal(t.Amount));
    }

    private async Task UpdateTransactionOverview()
    {
        TotalCredits = Transactions.Where(t => t.Type == "Credit").Sum(t => Convert.ToDecimal(t.Amount));
        TotalDebits = Transactions.Where(t => t.Type == "Debit").Sum(t => Convert.ToDecimal(t.Amount));
    }

    private void UpdateFilteredTransactions()
    {
        var query = Transactions
            .Where(t =>
                (string.IsNullOrWhiteSpace(SearchQuery) || t.Title.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrWhiteSpace(FilterByType) || t.Type == FilterByType));

        query = (SortBy, SortDescending) switch
        {
            ("Title", false) => query.OrderBy(t => t.Title),
            ("Title", true) => query.OrderByDescending(t => t.Title),
            ("Date", false) => query.OrderBy(t => t.Date),
            ("Date", true) => query.OrderByDescending(t => t.Date),
            ("Amount", false) => query.OrderBy(t => t.Amount),
            ("Amount", true) => query.OrderByDescending(t => t.Amount),
            ("Type", false) => query.OrderBy(t => t.Type),
            ("Type", true) => query.OrderByDescending(t => t.Type),
            _ => query.OrderBy(t => t.Date)
        };

        FilteredTransactions = query.ToList();
    }

    private async Task HandleSubmit()
    {
        if (NewTransaction.Type == "Debit" && Convert.ToDecimal(NewTransaction.Amount) > TotalBalance)
        {
            return;
        }

        await DbService.CreateTransaction(NewTransaction);
        await LoadTransactionsFromDatabase();
        await UpdateTotalBalance();
        await UpdateTransactionOverview();
        NewTransaction = new Transaction { Type = "Credit" };
    }

    private async Task DeleteTransaction(Transaction transaction)
    {
        await DbService.DeleteTransaction(transaction);
        await LoadTransactionsFromDatabase();
        await UpdateTotalBalance();
        await UpdateTransactionOverview();
    }

    private void OpenEditModal(Transaction transaction)
    {
        EditableTransaction = new Transaction
            {
                TransactionId = transaction.TransactionId,
                Title = transaction.Title,
                Type = transaction.Type,
                Amount = transaction.Amount,
                Tags = transaction.Tags,
                Date = transaction.Date,
                Notes = transaction.Notes
            };
        IsEditModalVisible = true;
    }

    private async Task SaveEdit()
    {
        var existingTransaction = Transactions.FirstOrDefault(t => t.TransactionId == EditableTransaction.TransactionId);
        if (existingTransaction != null)
        {
            existingTransaction.Title = EditableTransaction.Title;
            existingTransaction.Type = EditableTransaction.Type;
            existingTransaction.Amount = EditableTransaction.Amount;
            existingTransaction.Tags = EditableTransaction.Tags;
            existingTransaction.Date = EditableTransaction.Date;
            existingTransaction.Notes = EditableTransaction.Notes;

            await DbService.UpdateTransaction(existingTransaction);
        }

        await LoadTransactionsFromDatabase();
        await UpdateTotalBalance();
        await UpdateTransactionOverview();
        CloseEditModal();
    }

    private void CloseEditModal()
    {
        IsEditModalVisible = false;
    }

    private void ToggleSortDirection()
    {
        SortDescending = !SortDescending;
        UpdateFilteredTransactions();
    }
}
