@page "/dashboard"
@using MoneyTracks.Models
@using MoneyTracks.Services
@using System.Globalization
@inject LocalDbService DbService

<div class="container py-5">
    <style>
        /* Existing Styles */
        body {
            background-color: #f0f2f5;
        }

        .dashboard-card {
            background: white;
            border-radius: 16px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
            transition: transform 0.2s ease;
        }

            .dashboard-card:hover {
                transform: translateY(-5px);
            }

        .transactions-list {
            max-height: 400px;
            overflow-y: auto;
        }

        .filter-bar {
            margin-bottom: 1.5rem;
        }

        .metric-card {
            padding: 1.5rem;
        }
    </style>

    <!-- Header and Filters -->
    <div class="row mb-4 align-items-center">
        <div class="col">
            <h2 class="fw-bold text-dark mb-0">Financial Dashboard</h2>
            <p class="text-muted mb-0">@($"Updated as of {DateTime.Now:MMMM dd, yyyy}")</p>
        </div>
        <div class="col-auto">
            <div class="filter-bar d-flex">
                <input type="date" class="form-control me-2" @bind="StartDate" />
                <input type="date" class="form-control me-2" @bind="EndDate" />
                <button class="btn btn-primary" @onclick="ApplyDateFilter">Apply Filter</button>
            </div>
        </div>
    </div>

    <!-- New Section: Highest/Lowest Inflow, Outflow, and Debts -->
    <div class="row g-4 mb-4">
        <div class="col-md-4">
            <div class="dashboard-card p-4">
                <h6 class="fw-bold">Highest Inflow</h6>
                @if (HighestInflow != null)
                {
                    <p class="text-success">@FormatAmount(HighestInflow.Amount)</p>
                    <small>@HighestInflow.Date.ToString("MMM d, yyyy")</small>
                }
                else
                {
                    <p class="text-muted">No inflows found</p>
                }
            </div>
        </div>
        <div class="col-md-4">
            <div class="dashboard-card p-4">
                <h6 class="fw-bold">Highest Outflow</h6>
                @if (HighestOutflow != null)
                {
                    <p class="text-danger">@("-" + FormatAmount(HighestOutflow.Amount))</p>
                    <small>@HighestOutflow.Date.ToString("MMM d, yyyy")</small>
                }
                else
                {
                    <p class="text-muted">No outflows found</p>
                }
            </div>
        </div>
        <div class="col-md-4">
            <div class="dashboard-card p-4">
                <h6 class="fw-bold">Highest Debt Transaction</h6>
                @if (HighestDebt != null)
                {
                    <p class="text-warning">@FormatAmount(HighestDebt.RemainingAmount)</p>
                    <small>@HighestDebt.DueDate.ToString("MMM d, yyyy")</small>
                }
                else
                {
                    <p class="text-muted">No debt transactions found</p>
                }
            </div>
        </div>
    </div>

    <!-- Cash Flow and Metrics Row -->
    <div class="row g-4 mb-4">
        <div class="col-md-6 col-lg-3">
            <div class="dashboard-card h-100">
                <div class="metric-card">
                    <div class="d-flex align-items-center mb-3">
                        <div class="metric-icon bg-primary-subtle me-3">
                            <i class="bi bi-cash-stack text-primary fs-4"></i>
                        </div>
                        <h6 class="mb-0">Cash Flow</h6>
                    </div>
                    <div class="mb-3">
                        <small class="text-muted d-block">Total Inflow</small>
                        <h4 class="text-success mb-0">@FormatAmount(SummaryData.TotalInflows)</h4>
                    </div>
                    <div>
                        <small class="text-muted d-block">Total Outflow</small>
                        <h4 class="text-danger mb-0">@("-" + FormatAmount(SummaryData.TotalOutflows))</h4>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-6 col-lg-3">
            <div class="dashboard-card h-100">
                <div class="metric-card">
                    <div class="d-flex align-items-center mb-3">
                        <div class="metric-icon bg-warning-subtle me-3">
                            <i class="bi bi-wallet2 text-warning fs-4"></i>
                        </div>
                        <h6 class="mb-0">Total Debts</h6>
                    </div>
                    <h3 class="mb-2">@FormatAmount(SummaryData.TotalDebts)</h3>
                    <div class="progress mb-2">
                        @if (SummaryData.TotalDebts > 0)
                        {
                            var debtPercent = (SummaryData.RemainingDebts / SummaryData.TotalDebts) * 100m;
                            <div class="progress-bar bg-warning" style="width: @($"{debtPercent:F0}%")"></div>
                        }
                        else
                        {
                            <div class="progress-bar bg-warning" style="width: 0%"></div>
                        }
                    </div>
                    <small class="text-muted">65% of annual limit</small>
                </div>
            </div>
        </div>

        <div class="col-md-6 col-lg-3">
            <div class="dashboard-card h-100">
                <div class="metric-card">
                    <div class="d-flex align-items-center mb-3">
                        <div class="metric-icon bg-success-subtle me-3">
                            <i class="bi bi-pie-chart-fill text-success fs-4"></i>
                        </div>
                        <h6 class="mb-0">Debt Status</h6>
                    </div>
                    <div class="mb-3">
                        <small class="text-muted d-block">Cleared Debt</small>
                        <h4 class="text-success mb-0">@FormatAmount(SummaryData.ClearedDebts)</h4>
                    </div>
                    <div>
                        <small class="text-muted d-block">Remaining Debt</small>
                        <h4 class="text-danger mb-0">@FormatAmount(SummaryData.RemainingDebts)</h4>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-6 col-lg-3">
            <div class="dashboard-card h-100">
                <div class="metric-card">
                    <div class="d-flex align-items-center mb-3">
                        <div class="metric-icon bg-info-subtle me-3">
                            <i class="bi bi-cash-coin text-info fs-4"></i>
                        </div>
                        <h6 class="mb-0">Available Cash</h6>
                    </div>
                    <h3 class="text-info mb-0">@FormatAmount(AvailableCash)</h3>
                    <small class="text-muted">Current Balance</small>
                </div>
            </div>
        </div>
    </div>

    <!-- New Section: Total Transactions and Total Transaction Amount -->
    <div class="row g-4 mb-4">
        <div class="col-md-6 col-lg-3">
            <div class="dashboard-card h-100">
                <div class="metric-card">
                    <h6 class="mb-3">Total Transactions</h6>
                    <h3 class="text-muted mb-0">@SummaryData.TotalTransactions</h3>
                </div>
            </div>
        </div>

        <div class="col-md-6 col-lg-3">
            <div class="dashboard-card h-100">
                <div class="metric-card">
                    <h6 class="mb-3">Total Transaction Amount</h6>
                    <h3 class="text-muted mb-0">@FormatAmount(SummaryData.TotalTransactionAmount)</h3>
                </div>
            </div>
        </div>
    </div>

    <!-- Transactions Row -->
    <div class="row g-4">
        <div class="col-lg-6">
            <div class="dashboard-card p-4">
                <h5 class="mb-4">Highest Transaction</h5>
                <div class="transactions-list">
                    @if (HighestTransaction == null)
                    {
                        <div class="p-4 text-center">
                            <i class="bi bi-inbox fs-1 text-muted"></i>
                            <p class="text-muted mt-2">No transactions found</p>
                        </div>
                    }
                    else
                    {
                        <div class="transaction-item positive p-3 mb-3">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <h6 class="mb-1">@HighestTransaction.Title</h6>
                                    <span class="badge bg-success-subtle text-success">
                                        Highest Transaction
                                    </span>
                                    <small class="text-muted ms-2">
                                        @HighestTransaction.Date.ToString("MMM d, yyyy")
                                    </small>
                                </div>
                                <h5 class="mb-0 text-success">
                                    @(HighestTransaction.Type == "Credit"
                                        ? "+" + FormatAmount(HighestTransaction.Amount)
                                        : "-" + FormatAmount(HighestTransaction.Amount))
                                </h5>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="col-lg-6">
            <div class="dashboard-card p-4">
                <h5 class="mb-4">Lowest Transaction</h5>
                <div class="transactions-list">
                    @if (LowestTransaction == null)
                    {
                        <div class="p-4 text-center">
                            <i class="bi bi-inbox fs-1 text-muted"></i>
                            <p class="text-muted mt-2">No transactions found</p>
                        </div>
                    }
                    else
                    {
                        <div class="transaction-item negative p-3 mb-3">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <h6 class="mb-1">@LowestTransaction.Title</h6>
                                    <span class="badge bg-danger-subtle text-danger">
                                        Lowest Transaction
                                    </span>
                                    <small class="text-muted ms-2">
                                        @LowestTransaction.Date.ToString("MMM d, yyyy")
                                    </small>
                                </div>
                                <h5 class="mb-0 @(LowestTransaction.Type == "Credit" ? "text-success" : "text-danger")">
                                    @(LowestTransaction.Type == "Credit"
                                        ? "+" + FormatAmount(LowestTransaction.Amount)
                                        : "-" + FormatAmount(LowestTransaction.Amount))
                                </h5>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Pending Debts Row -->
    <div class="row g-4 mt-4">
        <div class="col-lg-12">
            <div class="dashboard-card p-4">
                <h5 class="mb-4">Pending Debts</h5>
                @if (FilteredPendingDebts == null || !FilteredPendingDebts.Any())
                {
                    <div class="p-4 text-center">
                        <i class="bi bi-inbox fs-1 text-muted"></i>
                        <p class="text-muted mt-2">No pending debts found</p>
                    </div>
                }
                else
                {
                    <div class="transactions-list">
                        @foreach (var debt in FilteredPendingDebts)
                        {
                            <div class="p-3 border-bottom">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <h6 class="mb-0">@debt.Title</h6>
                                    <span class="text-danger fw-semibold">
                                        @FormatAmount(debt.RemainingAmount)
                                    </span>
                                </div>
                                <small class="text-muted">
                                    Due: @debt.DueDate.ToString("MMM d, yyyy")
                                </small>
                                <div class="progress mt-2">
                                    @if (debt.TotalAmount > 0)
                                    {
                                        var ratio = (debt.RemainingAmount / debt.TotalAmount) * 100m;
                                        <div class="progress-bar bg-danger" style="width: @($"{ratio:F0}%")"></div>
                                    }
                                    else
                                    {
                                        <div class="progress-bar bg-danger" style="width: 0%"></div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Recent Transactions Row -->
    <div class="row g-4 mt-4">
        <div class="col-lg-12">
            <div class="dashboard-card p-4">
                <h5 class="mb-4">Recent Transactions</h5>
                @if (RecentTransactions == null || !RecentTransactions.Any())
                {
                    <div class="p-4 text-center">
                        <i class="bi bi-inbox fs-1 text-muted"></i>
                        <p class="text-muted mt-2">No recent transactions found</p>
                    </div>
                }
                else
                {
                    <div class="transactions-list">
                        @foreach (var transaction in RecentTransactions)
                        {
                            <div class="transaction-item p-3 mb-3 @(transaction.Type == "Credit" ? "positive" : "negative")">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h6 class="mb-1">@transaction.Title</h6>
                                        <small class="text-muted">
                                            @transaction.Date.ToString("MMM d, yyyy")
                                        </small>
                                    </div>
                                    <h5 class="mb-0 @(transaction.Type == "Credit" ? "text-success" : "text-danger")">
                                        @(transaction.Type == "Credit"
                                            ? "+" + FormatAmount(transaction.Amount)
                                            : "-" + FormatAmount(transaction.Amount))
                                    </h5>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private DateTime? StartDate;
    private DateTime? EndDate;

    private DashboardSummary SummaryData = new();
    private List<Transaction> AllTransactions = new();
    private List<Transaction> RecentTransactions = new();
    private List<Debt> PendingDebts = new();
    private List<Debt> FilteredPendingDebts = new();
    private Transaction HighestTransaction;
    private Transaction LowestTransaction;
    private Transaction HighestInflow;
    private Transaction HighestOutflow;
    private Debt HighestDebt;
    private decimal AvailableCash;

    protected override async Task OnInitializedAsync()
    {
        SummaryData = await DbService.GetDashboardSummary();
        AllTransactions = await DbService.GetTransactions();

        if (AllTransactions.Any())
        {
            HighestTransaction = AllTransactions.OrderByDescending(t => t.Amount).FirstOrDefault();
            LowestTransaction = AllTransactions.OrderBy(t => t.Amount).FirstOrDefault();
            HighestInflow = AllTransactions.Where(t => t.Type == "Credit").OrderByDescending(t => t.Amount).FirstOrDefault();
            HighestOutflow = AllTransactions.Where(t => t.Type == "Debit").OrderByDescending(t => t.Amount).FirstOrDefault();
        }

        PendingDebts = await DbService.GetPendingDebtsDashboard();
        FilteredPendingDebts = PendingDebts;
        HighestDebt = PendingDebts.OrderByDescending(d => d.RemainingAmount).FirstOrDefault();
        RecentTransactions = AllTransactions.OrderByDescending(t => t.Date).Take(5).ToList();
        AvailableCash = await DbService.GetAvailableCash();
    }

    private async Task ApplyDateFilter()
    {
        if (StartDate.HasValue && EndDate.HasValue)
        {
            AllTransactions = (await DbService.GetTransactions())
                .Where(t => t.Date >= StartDate.Value && t.Date <= EndDate.Value)
                .ToList();

            PendingDebts = (await DbService.GetPendingDebtsDashboard())
                .Where(d => d.DueDate >= StartDate.Value && d.DueDate <= EndDate.Value)
                .ToList();

            await OnInitializedAsync();
        }
    }

    private string FormatAmount(decimal amount)
    {
        return "$" + amount.ToString("N2");
    }
}
