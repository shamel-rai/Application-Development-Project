@page "/dashboard"
@using MoneyTracks.Models
@using MoneyTracks.Services
@using System.Globalization
@inject LocalDbService DbService

<div class="container py-5">
    <style>
        body {
            background-color: #f0f2f5;
        }

        .dashboard-card {
            background: white;
            border-radius: 16px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
            transition: transform 0.2s ease;
        }

            .dashboard-card:hover {
                transform: translateY(-5px);
            }

        .metric-card {
            background: linear-gradient(145deg, #ffffff, #f5f7fa);
            border-radius: 12px;
            padding: 1.5rem;
        }

        .metric-icon {
            width: 48px;
            height: 48px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .transactions-list {
            max-height: 400px;
            overflow-y: auto;
        }

        .transaction-item {
            border-left: 4px solid transparent;
            transition: all 0.2s ease;
        }

            .transaction-item:hover {
                background-color: #f8f9fa;
            }

            .transaction-item.positive {
                border-left-color: #28a745;
            }

            .transaction-item.negative {
                border-left-color: #dc3545;
            }

        .progress {
            height: 8px;
        }
    </style>

    <!-- Header -->
    <div class="row mb-4 align-items-center">
        <div class="col">
            <h2 class="fw-bold text-dark mb-0">Financial Dashboard</h2>
            <p class="text-muted mb-0">@($"Updated as of {DateTime.Now:MMMM dd, yyyy}")</p>
        </div>
    </div>

    <!-- Main Metrics Row -->
    <div class="row g-4 mb-4">
        <!-- Cash Flow Card -->
        <div class="col-md-6 col-lg-3">
            <div class="dashboard-card h-100">
                <div class="metric-card">
                    <div class="d-flex align-items-center mb-3">
                        <div class="metric-icon bg-primary-subtle me-3">
                            <i class="bi bi-cash-stack text-primary fs-4"></i>
                        </div>
                        <h6 class="mb-0">Cash Flow</h6>
                    </div>
                    <div class="mb-3">
                        <small class="text-muted d-block">Total Inflow</small>
                        <h4 class="text-success mb-0">@FormatAmount(SummaryData.TotalInflows)</h4>
                    </div>
                    <div>
                        <small class="text-muted d-block">Total Outflow</small>
                        <h4 class="text-danger mb-0">@("-" + FormatAmount(SummaryData.TotalOutflows))</h4>
                    </div>
                </div>
            </div>
        </div>

        <!-- Total Debts Card -->
        <div class="col-md-6 col-lg-3">
            <div class="dashboard-card h-100">
                <div class="metric-card">
                    <div class="d-flex align-items-center mb-3">
                        <div class="metric-icon bg-warning-subtle me-3">
                            <i class="bi bi-wallet2 text-warning fs-4"></i>
                        </div>
                        <h6 class="mb-0">Total Debts</h6>
                    </div>
                    <h3 class="mb-2">@FormatAmount(SummaryData.TotalDebts)</h3>
                    <div class="progress mb-2">
                        @if (SummaryData.TotalDebts > 0)
                        {
                            var debtPercent = (SummaryData.RemainingDebts / SummaryData.TotalDebts) * 100m;
                            <div class="progress-bar bg-warning" style="width: @($"{debtPercent:F0}%")"></div>
                        }
                        else
                        {
                            <div class="progress-bar bg-warning" style="width: 0%"></div>
                        }
                    </div>
                    <small class="text-muted">65% of annual limit</small>
                </div>
            </div>
        </div>

        <!-- Debt Status Card -->
        <div class="col-md-6 col-lg-3">
            <div class="dashboard-card h-100">
                <div class="metric-card">
                    <div class="d-flex align-items-center mb-3">
                        <div class="metric-icon bg-success-subtle me-3">
                            <i class="bi bi-pie-chart-fill text-success fs-4"></i>
                        </div>
                        <h6 class="mb-0">Debt Status</h6>
                    </div>
                    <div class="mb-3">
                        <small class="text-muted d-block">Cleared Debt</small>
                        <h4 class="text-success mb-0">@FormatAmount(SummaryData.ClearedDebts)</h4>
                    </div>
                    <div>
                        <small class="text-muted d-block">Remaining Debt</small>
                        <h4 class="text-danger mb-0">@FormatAmount(SummaryData.RemainingDebts)</h4>
                    </div>
                </div>
            </div>
        </div>

        <!-- Available Cash Card -->
        <div class="col-md-6 col-lg-3">
            <div class="dashboard-card h-100">
                <div class="metric-card">
                    <div class="d-flex align-items-center mb-3">
                        <div class="metric-icon bg-info-subtle me-3">
                            <i class="bi bi-cash-coin text-info fs-4"></i>
                        </div>
                        <h6 class="mb-0">Available Cash</h6>
                    </div>
                    <h3 class="text-info mb-0">@FormatAmount(AvailableCash)</h3>
                    <small class="text-muted">Current Balance</small>
                </div>
            </div>
        </div>
    </div>

    <!-- Highest & Lowest Transactions Row -->
    <div class="row g-4">
        <!-- Highest Transaction -->
        <div class="col-lg-6">
            <div class="dashboard-card p-4">
                <h5 class="mb-4">Highest Transaction</h5>
                <div class="transactions-list">
                    @if (HighestTransaction == null)
                    {
                        <div class="p-4 text-center">
                            <i class="bi bi-inbox fs-1 text-muted"></i>
                            <p class="text-muted mt-2">No transactions found</p>
                        </div>
                    }
                    else
                    {
                        <div class="transaction-item positive p-3 mb-3">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <h6 class="mb-1">@HighestTransaction.Title</h6>
                                    <span class="badge bg-success-subtle text-success">
                                        Highest Transaction
                                    </span>
                                    <small class="text-muted ms-2">
                                        @HighestTransaction.Date.ToString("MMM d, yyyy")
                                    </small>
                                </div>
                                <h5 class="mb-0 text-success">
                                    @(HighestTransaction.Type == "Credit"
                                        ? "+" + FormatAmount(HighestTransaction.Amount)
                                        : "-" + FormatAmount(HighestTransaction.Amount))
                                </h5>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Lowest Transaction -->
        <div class="col-lg-6">
            <div class="dashboard-card p-4">
                <h5 class="mb-4">Lowest Transaction</h5>
                <div class="transactions-list">
                    @if (LowestTransaction == null)
                    {
                        <div class="p-4 text-center">
                            <i class="bi bi-inbox fs-1 text-muted"></i>
                            <p class="text-muted mt-2">No transactions found</p>
                        </div>
                    }
                    else
                    {
                        <div class="transaction-item negative p-3 mb-3">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <h6 class="mb-1">@LowestTransaction.Title</h6>
                                    <span class="badge bg-danger-subtle text-danger">
                                        Lowest Transaction
                                    </span>
                                    <small class="text-muted ms-2">
                                        @LowestTransaction.Date.ToString("MMM d, yyyy")
                                    </small>
                                </div>
                                <h5 class="mb-0 @(LowestTransaction.Type == "Credit" ? "text-success" : "text-danger")">
                                    @(LowestTransaction.Type == "Credit"
                                        ? "+" + FormatAmount(LowestTransaction.Amount)
                                        : "-" + FormatAmount(LowestTransaction.Amount))
                                </h5>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Pending Debts Row -->
    <div class="row g-4 mt-4">
        <div class="col-lg-12">
            <div class="dashboard-card p-4">
                <h5 class="mb-4">Pending Debts</h5>
                @if (FilteredPendingDebts == null || !FilteredPendingDebts.Any())
                {
                    <div class="p-4 text-center">
                        <i class="bi bi-inbox fs-1 text-muted"></i>
                        <p class="text-muted mt-2">No pending debts found</p>
                    </div>
                }
                else
                {
                    <div class="transactions-list">
                        @foreach (var debt in FilteredPendingDebts)
                        {
                            <div class="p-3 border-bottom">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <h6 class="mb-0">@debt.Title</h6>
                                    <span class="text-danger fw-semibold">
                                        @FormatAmount(debt.RemainingAmount)
                                    </span>
                                </div>
                                <small class="text-muted">
                                    Due: @debt.DueDate.ToString("MMM d, yyyy")
                                </small>
                                <div class="progress mt-2">
                                    @if (debt.TotalAmount > 0)
                                    {
                                        var ratio = (debt.RemainingAmount / debt.TotalAmount) * 100m;
                                        <div class="progress-bar bg-danger" style="width: @($"{ratio:F0}%")"></div>
                                    }
                                    else
                                    {
                                        <div class="progress-bar bg-danger" style="width: 0%"></div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Recent Transactions Row -->
    <div class="row g-4 mt-4">
        <div class="col-lg-12">
            <div class="dashboard-card p-4">
                <h5 class="mb-4">Recent Transactions</h5>
                @if (RecentTransactions == null || !RecentTransactions.Any())
                {
                    <div class="p-4 text-center">
                        <i class="bi bi-inbox fs-1 text-muted"></i>
                        <p class="text-muted mt-2">No recent transactions found</p>
                    </div>
                }
                else
                {
                    <div class="transactions-list">
                        @foreach (var transaction in RecentTransactions)
                        {
                            <div class="transaction-item p-3 mb-3 @(transaction.Type == "Credit" ? "positive" : "negative")">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h6 class="mb-1">@transaction.Title</h6>
                                        <small class="text-muted">
                                            @transaction.Date.ToString("MMM d, yyyy")
                                        </small>
                                    </div>
                                    <h5 class="mb-0 @(transaction.Type == "Credit" ? "text-success" : "text-danger")">
                                        @(transaction.Type == "Credit"
                                            ? "+" + FormatAmount(transaction.Amount)
                                            : "-" + FormatAmount(transaction.Amount))
                                    </h5>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private DashboardSummary SummaryData = new();
    private Transaction HighestTransaction;
    private Transaction LowestTransaction;

    private List<Debt> PendingDebts = new();
    private List<Debt> FilteredPendingDebts = new();
    private decimal AvailableCash;
    private List<Transaction> AllTransactions = new();

    // NEW: List to store recent transactions
    private List<Transaction> RecentTransactions = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        // 1. Summaries
        SummaryData = await DbService.GetDashboardSummary();

        // 2. All transactions => find highest/lowest
        AllTransactions = await DbService.GetTransactions();
        if (AllTransactions.Any())
        {
            var sorted = AllTransactions.OrderByDescending(x => x.Amount).ToList();
            HighestTransaction = sorted.FirstOrDefault();
            LowestTransaction = sorted.LastOrDefault();
        }

        // 3. Recent transactions (last 5 by Date descending)
        RecentTransactions = AllTransactions
            .OrderByDescending(t => t.Date)
            .Take(5)
            .ToList();

        // 4. Pending Debts
        PendingDebts = await DbService.GetPendingDebtsDashboard();
        FilteredPendingDebts = PendingDebts;

        // 5. Available cash
        AvailableCash = await DbService.GetAvailableCash();
    }

    private string FormatAmount(decimal amount)
    {
        // Simple approach: always show "$" or code.
        return "$" + amount.ToString("N2");
    }
}
