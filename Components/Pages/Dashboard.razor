@page "/dashboard"
@using MoneyTracks.Models
@using System.Globalization
@inject MoneyTracks.Services.LocalDbService DbService

<div class="container mt-5">
    <style>
        /* Basic styling for a modern card-like look */
        .stat-card {
            transition: transform 0.2s ease;
            background: linear-gradient(145deg, #ffffff, #f6f6f6);
            box-shadow: 0 2px 15px rgba(0, 0, 0, 0.05);
        }

            .stat-card:hover {
                transform: translateY(-5px);
            }

        .stat-value {
            font-size: 1.75rem;
            font-weight: 600;
            line-height: 1.2;
        }

        .list-group-item {
            transition: background-color 0.2s ease;
        }

            .list-group-item:hover {
                background-color: #f8f9fa;
            }

        .card {
            box-shadow: 0 0 20px rgba(0,0,0,0.05);
            transition: box-shadow 0.3s ease;
        }

            .card:hover {
                box-shadow: 0 0 30px rgba(0,0,0,0.1);
            }

        .progress {
            height: 6px;
        }
    </style>

    <!-- Button to manually refresh the dashboard data -->
    <div class="mb-3 text-end">
        <button class="btn btn-info" @onclick="RefreshDashboard">
            <i class="bi bi-arrow-repeat me-1"></i>Refresh Dashboard
        </button>
    </div>

    <!-- Dashboard Summary -->
    <div class="card mb-5 border-0 rounded-4">
        <div class="card-header bg-primary bg-gradient text-white border-0 py-4">
            <h4 class="fw-bold mb-0">
                <i class="bi bi-grid-1x2-fill me-2"></i>
                Dashboard Summary
            </h4>
        </div>
        <div class="card-body">
            <div class="row g-4">
                <!-- Cash Flow Card -->
                <div class="col-md-3">
                    <div class="stat-card p-4 rounded-4 h-100">
                        <div class="d-flex justify-content-between mb-4">
                            <h6 class="text-primary">Cash Flow</h6>
                            <i class="bi bi-currency-dollar text-primary fs-4"></i>
                        </div>
                        <div class="mb-4">
                            <small class="text-muted d-block mb-2">Total Inflows</small>
                            <h5 class="text-success mb-0 stat-value">
                                @FormatAmount(SummaryData.TotalInflows)
                            </h5>
                        </div>
                        <div>
                            <small class="text-muted d-block mb-2">Total Outflows</small>
                            <h5 class="mb-0 stat-value @(SummaryData.TotalOutflows > SummaryData.TotalInflows ? "text-danger" : "text-success")">
                                @FormatOutflow(SummaryData.TotalOutflows, SummaryData.TotalInflows)
                            </h5>
                        </div>
                    </div>
                </div>

                <!-- Total Debts Card -->
                <div class="col-md-3">
                    <div class="stat-card p-4 rounded-4 h-100">
                        <div class="d-flex justify-content-between mb-4">
                            <h6 class="text-success">Total Debts</h6>
                            <i class="bi bi-wallet2 text-success fs-4"></i>
                        </div>

                        <!-- Show total debt amount -->
                        <h3 class="stat-value mb-2">
                            @FormatAmount(SummaryData.TotalDebts)
                        </h3>

                        <!-- Show number of debts -->
                        <small class="text-muted d-block mb-3">
                            Number of Debts: @NumberOfDebts
                        </small>

                        <div class="progress">
                            @if (SummaryData.TotalDebts > 0)
                            {
                                var clearedPercent = (SummaryData.ClearedDebts / SummaryData.TotalDebts) * 100;
                                <div class="progress-bar bg-success" style="width: @clearedPercent%"></div>
                            }
                            else
                            {
                                <div class="progress-bar bg-success" style="width: 0%"></div>
                            }
                        </div>
                    </div>
                </div>

                <!-- Debt Status Card -->
                <div class="col-md-3">
                    <div class="stat-card p-4 rounded-4 h-100">
                        <div class="d-flex justify-content-between mb-4">
                            <h6 class="text-danger">Debt Status</h6>
                            <i class="bi bi-pie-chart-fill text-danger fs-4"></i>
                        </div>
                        <div class="mb-4">
                            <small class="text-muted d-block mb-2">Cleared Debts</small>
                            <h5 class="text-success mb-0 stat-value">
                                @FormatAmount(SummaryData.ClearedDebts)
                            </h5>
                        </div>
                        <div>
                            <small class="text-muted d-block mb-2">Remaining Debts</small>
                            <h5 class="text-danger mb-0 stat-value">
                                @FormatAmount(SummaryData.RemainingDebts)
                            </h5>
                        </div>
                    </div>
                </div>

                <!-- Available Cash Card -->
                <div class="col-md-3">
                    <div class="stat-card p-4 rounded-4 h-100">
                        <div class="d-flex justify-content-between mb-4">
                            <h6 class="text-info">Available Cash</h6>
                            <i class="bi bi-cash-coin text-info fs-4"></i>
                        </div>
                        <h5 class="text-info mb-0 stat-value">
                            @FormatAmount(AvailableCash)
                        </h5>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Top Transactions -->
    <div class="card mb-5 border-0 rounded-4">
        <div class="card-header bg-success bg-gradient text-white border-0 py-4">
            <h4 class="fw-bold mb-0">
                <i class="bi bi-arrow-left-right me-2"></i>
                Top 5 Transactions
            </h4>
        </div>
        <div class="card-body p-0">
            @if (FilteredTransactions == null || !FilteredTransactions.Any())
            {
                <div class="p-4 text-center">
                    <i class="bi bi-inbox fs-1 text-muted"></i>
                    <p class="text-muted mt-2">No transactions found</p>
                </div>
            }
            else
            {
                <div class="list-group list-group-flush">
                    @foreach (var transaction in FilteredTransactions)
                    {
                        <div class="list-group-item border-0 py-4 px-4">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <h6 class="mb-1 fw-semibold">@transaction.Title</h6>
                                    <span class="badge @(transaction.Type == "Credit" ? "bg-success-subtle text-success" : "bg-danger-subtle text-danger") rounded-pill">
                                        @transaction.Type
                                    </span>
                                </div>
                                <span class="fs-5 fw-semibold @(transaction.Type == "Credit" ? "text-success" : "text-danger")">
                                    @FormatAmount(transaction.Amount)
                                </span>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>

    <!-- Pending Debts -->
    <div class="card border-0 rounded-4">
        <div class="card-header bg-danger bg-gradient text-white border-0 py-4">
            <h4 class="fw-bold mb-0">
                <i class="bi bi-clock-history me-2"></i>
                Pending Debts
            </h4>
        </div>
        <div class="card-body p-0">
            @if (FilteredPendingDebts == null || !FilteredPendingDebts.Any())
            {
                <div class="p-4 text-center">
                    <i class="bi bi-inbox fs-1 text-muted"></i>
                    <p class="text-muted mt-2">No pending debts found</p>
                </div>
            }
            else
            {
                <div class="list-group list-group-flush">
                    @foreach (var debt in FilteredPendingDebts)
                    {
                        <div class="list-group-item border-0 py-4 px-4">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <h6 class="mb-1 fw-semibold">@debt.Title</h6>
                                    <small class="text-muted">
                                        <i class="bi bi-calendar3 me-1"></i>
                                        Due: @debt.DueDate.ToShortDateString()
                                    </small>
                                </div>
                                <span class="fs-5 fw-semibold text-danger">
                                    @FormatAmount(debt.TotalAmount)
                                </span>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    // Summary data from the service
    private DashboardSummary SummaryData = new();

    // All debts (so we can get the count)
    private List<Debt> AllDebts = new();
    private int NumberOfDebts;

    // Top transactions data
    private List<Transaction> TopTransactions = new();
    private List<Transaction> FilteredTransactions = new();

    // Pending debts
    private List<Debt> PendingDebts = new();
    private List<Debt> FilteredPendingDebts = new();

    // Calculated AvailableCash
    private decimal AvailableCash = 0;

    // For filtering top transactions by type (optional)
    private string SelectedTransactionType = "";

    // For currency display
    private string PreferredCurrency = "USD";
    private CultureInfo PreferredCulture = CultureInfo.InvariantCulture;

    protected override async Task OnInitializedAsync()
    {
        // Initial load
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        // Load user for currency preference
        var user = await DbService.GetLoggedInUser();
        PreferredCurrency = user?.PreferredCurrency ?? "USD";
        PreferredCulture = GetCultureInfo(PreferredCurrency);

        // Load the summary
        SummaryData = await DbService.GetDashboardSummary();

        // Load top 5 transactions
        TopTransactions = await DbService.GetTopTransactions(5);

        // Load all debts to get the count & pending debts
        AllDebts = await DbService.GetAllDebts();
        NumberOfDebts = AllDebts.Count;

        PendingDebts = await DbService.GetPendingDebtsDashboard();

        // Load available cash from service so changes in
        // transactions or partial debt payments are reflected
        AvailableCash = await DbService.GetAvailableCash();

        // Filter data
        FilterData();
    }

    /// <summary>
    /// Called by the "Refresh Dashboard" button or manually.
    /// </summary>
    private async Task RefreshDashboard()
    {
        await LoadDashboardData();
        StateHasChanged(); // Re-render with the updated data
    }

    private void FilterData()
    {
        // Optional: filter top transactions by user-chosen type
        if (string.IsNullOrWhiteSpace(SelectedTransactionType))
        {
            FilteredTransactions = TopTransactions;
        }
        else
        {
            FilteredTransactions = TopTransactions
                .Where(t => t.Type == SelectedTransactionType).ToList();
        }

        // Show all pending debts (or filter further if needed)
        FilteredPendingDebts = PendingDebts;
    }

    private CultureInfo GetCultureInfo(string currencyCode)
    {
        // Adjust these as desired for your region
        return currencyCode switch
        {
            "USD" => new CultureInfo("en-US"),
            "EUR" => new CultureInfo("fr-FR"),
            "GBP" => new CultureInfo("en-GB"),
            "JPY" => new CultureInfo("ja-JP"),
            "INR" => new CultureInfo("en-IN"),
            _ => CultureInfo.InvariantCulture
        };
    }

    private string FormatAmount(decimal amount)
    {
        return amount.ToString("C", PreferredCulture);
    }

    /// <summary>
    /// Example outflow formatting if outflow > inflow => negative sign
    /// </summary>
    private string FormatOutflow(decimal outflow, decimal inflow)
    {
        if (outflow > inflow)
        {
            return "-" + outflow.ToString("C", PreferredCulture);
        }
        return outflow.ToString("C", PreferredCulture);
    }
}
